// Manages CRUD operations for Subtasks
const subtaskModel = require('../models/Subtask.js');
import mongoose from 'mongoose';
import { io } from '../server.js';
import joi, { not } from 'joi';
import { scheduleNotification } from '../utils/notificationScheduler.js';

const subtaskSchema = joi.object({
    title: joi.string().min(1).max(300).required(),
    status: joi.boolean().optional(),
    priority: joi.string().valid('low', 'medium', 'high').optional(),
    deadline: joi.date().optional(),
    notificationTimes: joi.array().items(joi.number()).optional()
});

// Create new subtask
const createSubtask = async (req, res) => {
    // Validate subtask inputs 
    const { error } = subtaskSchema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    try {
        const newSubtask = new subtaskModel({
            title: req.body.title,
            status: req.body.status,
            priority: req.body.priority,
            deadline: req.body.deadline
        });
        // saved new subtask to MongoDB
        const savedSubtask = await newSubtask.save();

        if (deadline && notificationTimes) {
            scheduleNotification(savedSubtask._id, 'subtask', new Date(deadline), notificationTimes);
        }

        // Emit event to all connected clients
        io.emit('newSubTaskCreated', savedSubtask);

        // Send response with created saved subtask
        res.status(201).json(savedSubtask);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

// Read/Load all subtasks
const readAllSubtask = async (req, res) => {
    try {
        const subtasks = await subtaskModel.find();
        res.status(200).json(subtasks);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};
// Read a single subtask by specific ID - ID is automatically generated by MongoDB
const readSubtaskByID = async (req, res) => {
    // Validate MongoDB ObjectID
    if(!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({message: 'Invalid Subtask ID'});
    }

    try {
        const subtask = await subtaskModel.findById(req.params.id);
        res.status(200).json(subtask);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

// Update subtask
const updateSubtask = async (req, res) => {
    // Validate Update input and ID
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ message: 'Invalid Subtask ID' });
    }
    const { error } = subtaskSchema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    try {
        const updatedSubtask = await subtaskModel.findByIdAndUpdate(
            req.params.id,
            {
                title: req.body.title,
                status: req.body.status,
                priority: req.body.priority,
                deadline: req.body.deadline
            },
            { new: true }
        );
        if(!updatedSubtask) {
            return res.status(404).json({error: 'Subtask not found'});
        }

        if (req.body.deadline && req.body.notificationTimes) {
            scheduleNotification(updatedSubtask._id, 'subtask', new Date(req.body.deadline), req.body.notificationTimes);
        }

        // Emit updated event to all connected clients
        io.emit('subtaskUpdated', updatedSubtask);

        res.status(200).json(updatedSubtask);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

// Delete subtask
const deleteSubtask = async (req, res) => {
    // Validate MongoDB ObjectID
    if(!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({message: 'Invalid Subtask ID'});
    }
    
    try {
        const deletedSubtask = await subtaskModel.findByIdAndDelete(req.params.id);
        if(!deletedSubtask) {
            return res.status(404).json({error: 'Subtask not found'});
        }

        // Emit delete event to all connected clients
        io.emit('subtaskDeleted', deletedSubtask);

        res.status(200).json(deletedSubtask);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

module.exports = { createSubtask, readAllSubtask, readSubtaskByID, updateSubtask, deleteSubtask };