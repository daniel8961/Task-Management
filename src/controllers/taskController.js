// Manages CRUD operations for Tasks
const taskModel = require('../models/Task');
import mongoose from 'mongoose';
import { io } from '../server.js';
import joi from 'joi';


const taskSchema = joi.object({
    title: joi.string().min(1).max(300).required(),
    status: joi.boolean().optional(),
    priority: joi.string().valid('low', 'medium', 'high').optional(),
    deadline: joi.date().optional()
});

// Create new task
const createTask = async (req, res) => {
    const { error } = taskSchema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    try {
        const newTask = new taskModel(req.body);
        // saved new task to MongoDB
        const savedTask = await newTask.save();

        // Emit event to all connected clients
        io.emit('newTaskCreated', savedTask);

        // Send response with created saved task
        res.status(201).json(savedTask);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

// Read/Load all tasks 
const readAllTask = async (req, res) => {
    try {
        const tasks = await taskModel.find();
        res.status(200).json(tasks);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

// Read a single task by specific ID - ID is automatically generated by MongoDB
const readTaskByID = async (req, res) => {
    // Validate MongoDB ObjectID
    if(!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({message: 'Invalid Task ID'});
    }

    try {
        const task = await taskModel.findById(req.params.id);
        res.status(200).json(task);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
};

// Update task
const updateTask = async (req, res) => {
    // Validate Update input and ID
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ message: 'Invalid Task ID' });
    }
    const { error } = taskSchema.validate(req.body);
    if (error) return res.status(400).json({ message: error.details[0].message });

    try {
        const updatedTask = await taskModel.findByIdAndUpdate(
            req.params.id,
            {
                title: req.body.title,
                status: req.body.status,
                priority: req.body.priority,
                deadline: req.body.deadline
            },
            { new: true, runValidators: true } // Return updated task & validate fields
        );
        if (!updatedTask) {
            return res.status(404).json({ message: 'Task not found' });
        }

        // Emit updated event to all connected clients
        io.emit('taskUpdated', updatedTask);

        res.status(200).json(updatedTask);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

// Delete task
const deleteTask = async (req, res) => {
    // Validate Task ID
    if (!mongoose.Types.ObjectId.isValid(req.params.id)) {
        return res.status(400).json({ message: 'Invalid Task ID' });
    }

    try {
        const deletedTask = await taskModel.findByIdAndDelete(req.params.id);
        if (!deletedTask) {
            return res.status(404).json({ message: 'Task not found' });
        }

        // Emit delete event to all connected clients
        io.emit('taskDeleted', { id: req.params.id });

        res.status(200).json({ message: 'Task deleted' });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
};

export { createTask, readAllTask, readTaskByID, updateTask, deleteTask };