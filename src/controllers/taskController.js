// Manages CRUD operations for Tasks
import taskModel from '../models/Task';
import express from 'express';
import bodyParser from 'body-parser';
import Task from '../models/Task';

const app = express();

const PORT = 5000;

app.use(bodyParser.json());

// Create new task
app.post('/tasks', async (req, res) => {
    try {
        const newTask = new taskModel({
            title: req.body.title,
            status: req.body.status,
            priority: req.body.priority,
            deadline: req.body.deadline
        });
        // saved new task to MongoDB
        const savedTask = await newTask.save();
        // Send response with created saved task
        res.status(201).json(savedTask);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
});

// Read/Load all tasks 
app.get('/tasks', async (req, res) => {
    try {
        const tasks = await Task.find();
        res.status(200).json(tasks);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
});

// Read a single task by specific ID - ID is automatically generated by MongoDB
app.get('/tasks/:id', async (req, res) => {
    try {
        const task = await taskModel.findById(req.params.id);
        res.status(200).json(task);
    } catch (err) {
        res.status(400).json({error: err.message});
    }
});

// Update task
app.put('/tasks/:id', async (req, res) => {
    try {
        const updatedTask = await Task.findByIdAndUpdate(
            req.params.id,
            {
                title: req.body.title,
                status: req.body.status,
                priority: req.body.priority,
                deadline: req.body.deadline
            },
            { new: true, runValidators: true } // Return updated task & validate fields
        );

        if (!updatedTask) {
            return res.status(404).json({ message: 'Task not found' });
        }

        res.status(200).json(updatedTask);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// Delete task
app.delete('/tasks/:id', async (req, res) => {
    try {
        const deletedTask = await Task.findByIdAndDelete(req.params.id);

        if (!deletedTask) {
            return res.status(404).json({ message: 'Task not found' });
        }

        res.status(200).json({ message: 'Task deleted' });
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

app.listen(PORT, () => {
    console.log(`listening on port ${PORT}`);
})